# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rSsmUfyxFOyuSM4rZF5Fp93xJ9RG84G3
"""

import numpy as np
import pandas as pd
import os
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
from sklearn.model_selection import cross_val_score
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import joblib
from sklearn.metrics import accuracy_score

df = pd.read_csv(r"/content/sample_data/collegePlace.csv")

df.head()

df.info()

df.isnull().sum()

def transformationplot(feaature):
  plt.figure(figsize=(12,5))
  plt.subplot(1,2,1)
  sns.distplot(feauture)
  transformationplot(np.log(df['age']))

df = df.replace(['male'],[0])
df = df.replace(['female'],[1])
df = df.replace(['compute science','information techonology','electronics and communication','machanical','elecrical','civil'],[0,1,2,3,4,5])
df = df.drop(['Hostel'], axis=1)
df

plt.figure(figsize=(12,5))
plt.subplot(121)
sns.distplot(df['CGPA'],color='r')

plt.figure(figsize=(12,5))
plt.subplot(121)
sns.distplot(df['placedOrnot'],color='r')

plt.figure(figsize=(18,4))
plt.subplot(1,4,1)
sns.countplot(data['Gender'])
plt.subplot(1,4,2)
sns.countplot(data['Education'])
plt.show()

classifier = svm.SVC(kernel='linear')
classifier.fit(X_train, Y_train)
SVC(kernel='linear')
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy_score of the training data:', training_data_accuracy)
Accuracy score of the training data: 0.7685497478489039

best_k ={"regular":0}
best_score = {"regular":0}
from k in range(3,50,2):
  ## using regular training set
  knn_temp = KNeighborsclassifier(n_neighbors=k)
  knn_temp.fit, Y_train)
  knn_temp_pred = knn_temp.predict(x_test)
  score = metrics.accuracy_score(Y_test, knn-temp_pred)* 100
  if score >=best_scpre["Regular"] and score < 100:
    best_score["Regular"]=score
    best_k["Regular"] = k
print("---Results---\nk:{}\inscore: {}".format(best_k, best_score))
## Instantiate the models
knn = KNeighborsclassifier(n_neighbors=best_k["Regular"])
## fit the model to the training set
knn.fit(x_train, Y_train)
knn_pred = knn.predict(x_test)
tested = accuracy sore(knn pred. Y test)
---Results---
K: {'Regular': 7}
score: {'Regular':86.19528619528619}

import tensorflow as tf
from tensorflow import keras
from keras.models import sequential
from tensorflow.keras import layers

classifier = sequential()

   #add input layer and first hidden layer 
   classifier.add(keras.layers.dense(6,activation = 'relu', input-dim= 6))
   classifier.add(keras.layer.dropout(0.50))
   #add 2nd hidden layer
   classifier.add(keras.layers.Dense(1, activation = 'sigmoid'))

#compilling theb model
   loss_1 = tf. keras.losses.BinaryCrossentropy()

   classifier.compile(optimizer = 'Adam', loss = loss_1 , metrics = ['accuracy'])

#fitting the model
classifier.fit(x_train, Y_train, batch_size = 20, epochs = 100)

import pickle
  pickle.dump(knn,open("placement.pkl,'wb"))
  model = pickle.load(open('placement.pkl', 'rb'))

<section id="hero" class="d-flex flex-column justify-content-center">
 <div class=:"container">
  <div class="row justify-content-center">
   <div class="col-xl-8">
     <h1>identifying patterns and treands in campus placement data using ,machine learning</h1>
   </div>
  </div>
 </div>
</section><-- End Hero-->

from flask import flask, render_template , request
app=flask(__name__)
import pickle
import joblib
model=pickle.load(open("placement123.pkl",'rb'))
ct=joblib.load('plaement')

@app.route('/')
def hello():
    return render_template("index.html")

@app,route('/guest' , methods = ["POST"])
def guest():
    sen1=request.from["sen1"]
    sen2=request.from["sen2"]
    sen3=request.from["sen3"]
    sen4=request.from["sen4"]
    sen5=request.from["sen5"]
    sen6=request.from["sen6"]
@app.route('/y_predict , methods = ["POST'])
def y_predict():
x_test = [[(yo) for yp in request.from.values()]]
    prediction =model.predict(x_test)

    prediction = prediction[0]

    return render_template("scondpage.html",y=prediction)

app.run(debug=True)

serving flask app" (lazy loading)
Environment: production
use a production WSGI server instead.
Debug mode:  on
Restarting with watchdog (windowsapl)
Debugger is active!
Debugger PIN: 146-359-021
Running on http://127.0.0.1:5000/ (press CTRL+C to quit)